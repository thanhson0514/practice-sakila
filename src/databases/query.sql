!-- Level 1
# 3. Write a SQL query to return the top 5 most rented films in the database, along with the number of times they have been rented.
SELECT `film`.film_id, `film`.title, COUNT(*) AS 'the number of times they have been rented'  
FROM `film`
LEFT JOIN (
	SELECT `inventory`.* FROM `inventory`
    LEFT JOIN `rental`
    ON `rental`.inventory_id = `inventory`.inventory_id
) AS inventory_rental
ON `film`.`film_id` = inventory_rental.film_id
GROUP BY `film`.film_id, `film`.title
ORDER BY COUNT(*) DESC
LIMIT 5;

# 7. Write a SQL query to return the names of all actors who have appeared in more than 20 films in the database.
SELECT
    CONCAT(
        actor.first_name,
        ' ',
        actor.last_name
    ) AS full_name
FROM film_actor
    LEFT JOIN actor ON actor.actor_id = film_actor.actor_id
GROUP BY film_actor.actor_id
HAVING
    COUNT(film_actor.actor_id) > 20;

# 8. Write a SQL query to return the titles of all films in the database that have a rating of 'PG-13' and a length of more than 120 minutes.
SELECT title
FROM film
WHERE
    rating = 'PG-13'
    AND length > 120;

!-- Level 2
# 1. Write a SQL query to return the top 10 customers who have generated the most revenue for the store, including their names and total revenue generated.
SELECT 
	customer.first_name, 
    customer.last_name, 
    SUM(payment.amount) AS 'total revenue generated'
FROM customer
INNER JOIN payment
ON customer.customer_id = payment.customer_id
GROUP BY 
	customer.customer_id, 
    customer.first_name, 
    customer.last_name
ORDER BY COUNT(*) DESC
LIMIT 10;

# 2. Write a SQL query to return the names and contact information of all customers who have rented films in all categories in the database.
SELECT
    first_name,
    last_name,
    email
FROM customer
WHERE customer_id IN (
        SELECT
            customer_category.customer_id
        FROM (
                SELECT
                    rental.customer_id,
                    film_category.category_id
                FROM rental
                    INNER JOIN inventory ON rental.inventory_id = inventory.inventory_id
                    INNER JOIN film_category ON film_category.film_id = inventory.film_id
                GROUP BY
                    rental.customer_id,
                    film_category.category_id
            ) as customer_category
        GROUP BY
            customer_category.customer_id
        HAVING COUNT(*) = (
                SELECT
                    COUNT(*)
                FROM
                    category
            )
    ) # 3. Write a SQL query to return the titles of all films in the database that have been rented at least once but never returned.
SELECT DISTINCT title
FROM film
    INNER JOIN inventory ON inventory.film_id = film.film_id
    LEFT JOIN rental ON inventory.inventory_id = rental.inventory_id
WHERE return_date IS NULL;

# 4. Write a SQL query to return the names of all actors who have appeared in at least one film in each category in the database.
SELECT first_name, last_name
FROM actor
WHERE actor_id IN (
        SELECT actor_id
        FROM film_actor
        WHERE film_id IN (
                SELECT
                    film_category.film_id
                FROM
                    film_category
                GROUP BY
                    film_category.category_id,
                    film_category.film_id
            )
    );

# 6. Write a SQL query to return the total revenue generated by each actor in the database, based on the rental fees of the films they have appeared in.
SELECT
    actor.first_name,
    actor.last_name,
    film_inventory.title as 'film title',
    film_inventory.quantity_of_rental as 'the total revenue'
FROM film_actor
    INNER JOIN (
        SELECT
            film.title,
            inventory.film_id,
            film.rental_rate * COUNT(*) as quantity_of_rental
        FROM rental
            INNER JOIN inventory ON rental.inventory_id = inventory.inventory_id
            INNER JOIN film ON inventory.film_id = film.film_id
        GROUP BY
            inventory.film_id
    ) as film_inventory ON film_inventory.film_id = film_actor.film_id
    INNER JOIN actor ON actor.actor_id = film_actor.actor_id;

/*    
 7. Write a SQL query to return the names of all actors who have appeared in at least one film with a 
 rating of 'R', but have never appeared in a film with a rating of 'G'.
 */

SELECT first_name, last_name
FROM actor
WHERE actor_id IN (
        SELECT
            actor_rating.actor_id
        FROM (
                SELECT
                    actor_id,
                    rating
                FROM film
                    INNER JOIN film_actor ON film_actor.film_id = film.film_id
                GROUP BY
                    actor_id,
                    rating
                HAVING
                    rating LIKE 'R'
                    OR rating LIKE 'G'
            ) as actor_rating
        GROUP BY
            actor_rating.actor_id
        HAVING COUNT(*) < 2
    );

/*
 8. Write a SQL query to return the titles of all films in the database that have been 
 rented by more than 50 customers, but have never been rented by the same customer more than once.
 */

SELECT title
FROM film
WHERE film.film_id IN (
        SELECT film.film_id
        FROM film
            LEFT JOIN (
                SELECT
                    inventory.film_id AS 'film_id'
                FROM
                    inventory
                    INNER JOIN rental ON rental.inventory_id = inventory.inventory_id
                GROUP BY
                    inventory.film_id,
                    customer_id
            ) as inventory_rental ON inventory_rental.film_id = film.film_id
        GROUP BY film.film_id
        HAVING COUNT(*) > 50
    );

# 10. Write a SQL query to return the titles of all films in the database that have been rented by every customer who has ever rented a film from the 'Action' category.
SELECT
    film.title,
    category.name
FROM inventory
    INNER JOIN film_category ON film_category.film_id = inventory.film_id
    INNER JOIN film ON film.film_id = inventory.film_id
    INNER JOIN category ON category.category_id = film_category.category_id
WHERE
    category.name LIKE 'Action'
GROUP BY film.film_id;